SamplerState PointSampler : register (s0);
SamplerState LinearSampler : register (s1);
Texture2D s0 : register(t0);
struct VS_OUTPUT
{
    float4 Position     : SV_POSITION; // vertex position
	float2 UV			: TEXCOORD0;
};
float4 main( VS_OUTPUT Input) : SV_Target
{

    // Compute the average of the 4 necessary samples
	float average = 0.0f;
	float maximum = -1e20;
	float4 color = 0.0f;
	float3 WEIGHT = float3( 0.299f, 0.587f, 0.114f );
        
    for( int y = -1; y <= 1; y++ )
    {
        for( int x = -1; x <= 1; x++ )
        {
            color = s0.Sample( PointSampler, Input.UV,int2(x,y)  );
            
            // There are a number of ways we can try and convert the RGB value into
            // a single luminance value:
            
            // 1. Do a very simple mathematical average:
            //float GreyValue = dot( color.rgb, float3( 0.33f, 0.33f, 0.33f ) );
            
            // 2. Perform a more accurately weighted average:
            //float GreyValue = dot( color.rgb, WEIGHT );
            
            // 3. Take the maximum value of the incoming, same as computing the
            //    brightness/value for an HSV/HSB conversion:
            float GreyValue = max( color.r, max( color.g, color.b ) );
            
            // 4. Compute the luminance component as per the HSL colour space:
            //float GreyValue = 0.5f * ( max( color.r, max( color.g, color.b ) ) + min( color.r, min( color.g, color.b ) ) );
            
            // 5. Use the magnitude of the colour
            //float GreyValue = length( color.rgb );
                        
            maximum = max( maximum, GreyValue );
            average += (0.25f * log( 1e-5 + GreyValue )); //1e-5 necessary to stop the singularity at GreyValue=0
        }
    }
        
        average = exp( average );
        
    // Output the luminance to the render target
        return float4( average, maximum, 0.0f, 1.0f );
        
}