cbuffer cbPerCamera : register( b1 )
{
    matrix  ViewProjection;
	float4	vCameraPosition;
	float4	vCameraDir;
	float4	vCameraUp;
	float4	vVP_NearFar;
   
}
cbuffer	cbPerObject	:	register(b2)
{
	 matrix  World;
}
cbuffer	cbPerMaterial	:	register(b3)
{
	 float4  type;
}


struct VS_INPUT
{
    float4 Position     : POSITION; // vertex position 
};

struct VS_OUTPUT
{
	float4 UV			: TEXCOORD0;
    float4 Position     : SV_POSITION; // vertex position
};

VS_OUTPUT main( VS_INPUT input )
{
    VS_OUTPUT Output;

	float4	worldpos	=	mul(World,input.Position);
    // Transform the position from object space to homogeneous projection space
    Output.Position =	mul( ViewProjection ,float4(worldpos.xyz,1));
	Output.UV		=	input.Position*type;	

    
    return Output;    
}