cbuffer cbPerCamera : register( b1 )
{
    matrix  ViewProjection;
	float4	vCameraDir;
	float4	vCameraPosition;
	float4	vCameraUp;
	float4	vVP_NearFar;
   
};

struct VS_OUTPUT
{
    float4 Position     : SV_POSITION; // vertex position
	float2 UV			: TEXCOORD0;
};

struct	PS_OUTPUT{
	float4	Color				:	SV_Target0;
};

Texture2D		DiffuseTex		:	register(t0);
Texture2D		AOTex			:	register(t1);
Texture2D		ShadowTex		:	register(t2);
Texture2D		SOTex			:	register(t3);
Texture2D		EmissiveTex		:	register(t4);
Texture2D		DefferredLight	:	register(t5);
SamplerState	SS_WrapLine2	:	register(s0);




float3 Uncharted2Tonemap(float3 x)
{
float A = 0.15;
float B = 0.50;
float C = 0.10;
float D = 0.20;
float E = 0.02;
float F = 0.30;
float W = 11.2;

   return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
};

float4 ToneMapping( float4 texColor,float e )
{	
float W = 11.2;
   texColor *= e;  // Hardcoded Exposure Adjustment

   float ExposureBias = 2.0f;
   float3 curr = Uncharted2Tonemap(ExposureBias*texColor);

   float3 whiteScale = 1.0f/Uncharted2Tonemap(W);
   float3 color = curr*whiteScale;

   float3 retColor = pow(abs(color),1/2.2);
   return float4(retColor,1);
}



PS_OUTPUT main( VS_OUTPUT Input ){

	float2	halfPixel	=	vVP_NearFar.xy*0.5f;
	float2	uv			=	Input.UV+halfPixel;

	PS_OUTPUT	Out;
	float4	diff		=	DiffuseTex.Sample(SS_WrapLine2,Input.UV);
	float4	ao			=	0;//AOTex.Sample(SS_WrapLine2,uv);
	
	ao+=AOTex.Sample(SS_WrapLine2,uv+float2(1,1)*vVP_NearFar.xy);
	ao+=AOTex.Sample(SS_WrapLine2,uv+float2(-1,-1)*vVP_NearFar.xy);
	ao+=AOTex.Sample(SS_WrapLine2,uv+float2(1,-1)*vVP_NearFar.xy);
	ao+=AOTex.Sample(SS_WrapLine2,uv+float2(-1,1)*vVP_NearFar.xy);
	ao*=0.25f;
	//ao = pow(ao,1.5);
	float4	shadow		=	ShadowTex.Sample(SS_WrapLine2,uv);	
	float4	so			=	SOTex.Sample(SS_WrapLine2,uv);
	float4  emissive	=	EmissiveTex.Sample(SS_WrapLine2,uv);
	float4	light		=	DefferredLight.Sample(SS_WrapLine2,uv);
	//emissive.xyz+ao.xyz*diff.w+
	float4 finalcolor	=	float4((light.xyz+emissive.xyz+ao.xyz+(shadow.xxx+shadow.yyy)*float3(1.0,0.8,0.7)*0.4)*diff.xyz,1);
	Out.Color			=	ToneMapping(finalcolor,2);
	return	Out;
   
}