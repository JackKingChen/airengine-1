//#include "Common.h"
ByteAddressBuffer		voxeloctree		:	register(t0);
StructuredBuffer<uint>	voxelColor		:	register(t1);
TextureCube				Dir2Order		:	register(t2);		
SamplerState			SS_WarpPoint	:	register(s0);	
cbuffer cbPerCamera : register( b1 )
{
    matrix  ViewProjection;
	float4	vCameraDir;
	float4	vCameraPosition;
	float4	vCameraUp;
	float4	vVP_NearFar;
   
}
cbuffer cbPerMaterial	:	register(b3)
{
	matrix	matViewProjInv;
}

//#define USE_SPHERE_CHECK

bool	RayCastBoundingBox(float3 vStart,float3 vDir,float3 vMin,float3 vMax,in float fMaxDistance,inout float fOutDistance)

{
	float3	fmin		=	vMin	-	vStart;
	float3	fmax		=	vMax	-	vStart;
	float3	invMinDir	=	fmin	/	vDir;
	float3	invMaxDir	=	fmax	/	vDir;

	fOutDistance		=	10000.0f;

	float3	fNear		=	min(invMinDir,invMaxDir);
	float3	fFar		=	max(invMinDir,invMaxDir);
	float	maxNear		=	max(max(fNear.x,fNear.y),fNear.z);
	float	minFar		=	min(min(fFar.x,fFar.y),fFar.z);
	if(	maxNear	>	minFar	||
		maxNear	>	fMaxDistance	||
		minFar	<	0.0f)
	{
		return	false;
	}
	if(maxNear	<	0.0f)
		maxNear	=	0.0f;
	fOutDistance	=	maxNear;	
	return	true;
};


float	RayCastBoundingBox2(float3 vStart,float3 vDir,float3 vMin,float3 vMax)

{
	
	float3	fmin		=	vMin	-	vStart;
	float3	fmax		=	vMax	-	vStart;
	float3	invMinDir	=	fmin	/	vDir;
	float3	invMaxDir	=	fmax	/	vDir;

	
	float3	fNear		=	min(invMinDir,invMaxDir);
	float3	fFar		=	max(invMinDir,invMaxDir);
	float	maxNear		=	max(max(fNear.x,fNear.y),fNear.z);
	float	minFar		=	min(min(fFar.x,fFar.y),fFar.z);
	if(maxNear	<	0.0f)
		maxNear	=	0.0f;
	return	minFar	-	maxNear;
};

bool RayCastSphere(float3 vStart,float3 vDir,float3 vSphere,float fSize,float fMaxDistance,inout float fOutDistance)
{
	float3	vSphere_Eye	=	vSphere   -   vStart;
    float   dis            =   length(vSphere_Eye);
    if(dis   <=   fSize){
		fOutDistance   =   0;
		return   true;
    }
    float   dotLen         =   dot(vSphere_Eye,vDir);
      
    float   center_to_ray   =   dis*dis-dotLen*dotLen;
    if(   center_to_ray   <   fSize*fSize){
		fOutDistance   =   dis-fSize;
		if(fOutDistance	<	fMaxDistance)
			return true;
    };
    return false;
}

uint	CalcOrder(float3 vDir){
	float aData[8];
	uint  anIndex[8]={0,1,2,3,4,5,6,7};
	uint  uiOrder=0;
	for(uint i=0;i<8;i++){
		aData[i]=dot(float3(i>>2,1&(i>>1),1&i),vDir);	
	}
	uint N2=8;
	    // Bitonic sort
    for( uint k = 2; k <= N2; k = 2*k )
    {
        for( uint j = k>>1; j > 0 ; j = j>>1 ) 
        {
            for( uint i = 0; i < N2; i++ ) 
            {
                float di = aData[ anIndex[ i ] ];
                uint ixj = i^j;
                if ( ( ixj ) > i )
                {
                    float dixj = aData[ anIndex[ ixj ] ];
                    if ( ( i&k ) == 0 && di > dixj )
                    { 
                        int temp = anIndex[ i ];
                        anIndex[ i ] = anIndex[ ixj ];
                        anIndex[ ixj ] = temp;
                    }
                    if ( ( i&k ) != 0 && di < dixj )
                    {
                        int temp = anIndex[ i ];
                        anIndex[ i ] = anIndex[ ixj ];
                        anIndex[ ixj ] = temp;
                    }
                }
            }
        }
    }
	for(uint n=0;n<8;n++){
		uiOrder|=(anIndex[n])<<3*n;	
	}
	return uiOrder;
}

struct VS_OUTPUT
{
    float4 Position     : SV_POSITION; // vertex position
	float2 UV			: TEXCOORD0;
};

struct	PS_OUTPUT{
	float4	Diff			:	SV_Target0;
};

float4	U32_F32(uint uiColor){
	return	float4(
					((uiColor&0x00ff0000)>>16)/255.0f,
					((uiColor&0x0000ff00)>>8)/255.0f,
					((uiColor&0x000000ff))/255.0f,
					((uiColor&0xff000000)>>24)/255.0f
			);
}
uint	F32_U32(float4 c){
	uint4 ic=c*255;
	return	ic.z|ic.y<<8|ic.x<<16|ic.w<<24;
}
#define	MAX_DEPTH	9
#define VOXEL_BOUND_SIZE	pow(2,MAX_DEPTH-1);

float4 main( VS_OUTPUT Input ):SV_Target0{
	float2 xy	=	Input.UV*float2(2,-2)+float2(-1,1);
	float4	wpos	=	mul(matViewProjInv,float4(xy,0,1));
	wpos/=wpos.w;
	float3 vCamPos	=	vCameraPosition.xyz;
	float3 dir	=	normalize(wpos.xyz	-	vCamPos	);


	uint uiOffset[10]={
		0,0,0,0,0,
		0,0,0,0,0
	};
	uint uiStack=0;

	int	uiDepth	=	0;
	float3	vHalfSize	=	VOXEL_BOUND_SIZE;
	float3  vMin		=	-vHalfSize;
	if(RayCastBoundingBox2(vCamPos,dir,vMin,vHalfSize)	<	0){
		discard;
		return 0;
	}
	//return ;
	uint uiOrder = F32_U32(Dir2Order.SampleLevel(SS_WarpPoint,dir,0));
	//return U32_F32(uiOrder);
	uint	retColor	=	0;
	//float4 fColor	=	float4(0,0,0,1.0f);
	//uint	uiChildOrder	=	uiOrder;
	int iter=0;
	[loop]
	while(true){
		
		[loop]
		for(;iter<8;){
			
			uint childidx	=	(uiOrder>>(iter*3))&0x7;



			float3	vNewMin	=	vMin+float3(childidx>>2,1&(childidx>>1),1&childidx)*vHalfSize;
			
			
			
			float3	vNewMax	=	vNewMin+vHalfSize;
			float fDis	=	RayCastBoundingBox2(vCamPos,dir,vNewMin,vNewMax);
			if(fDis<0.0f){

				iter++;
				continue;
			}

			uint addr		=	(uiOffset[uiDepth]+childidx)*4;
			uint uiChild	=	voxeloctree.Load(addr);

			//float fCmp=uiChild*1.001f;
			if(uiChild==0){
				iter++;
				continue;
			}
		
	

			if(uiDepth	==	MAX_DEPTH-1){

				retColor=voxelColor[uiOffset[uiDepth]+childidx];

				iter=8;
				uiDepth=0;
				continue;			
			}else{
				uiStack&=0xfffffff8;
				uiStack|=iter;
				uiDepth++;
				
				
				uiOffset[uiDepth]	=	uiChild;
				vHalfSize	/=	2.0f;
				vMin		=	vNewMin;

				//float3	fInterSect	=	vCamPos+dir*fDis;
				//uint	uiIndex		=	dot(fInterSect>(vMin+vHalfSize),float3(4,2,1));
				uiStack<<=3;//anIndex2[uiIndex];
				iter=0;//anIndex2[uiIndex];
				
				//retColor=0xffffff;
			
				continue;
			}
		}
		if(uiDepth<=0){
			break;
		}else{
			uiDepth--;
			vHalfSize*=2.0f;
			uiStack>>=3;
			int iIDX	=	(uiStack&0x7);
			uint childidx	=	(uiOrder>>(iIDX*3))&0x7;
			vMin	-=	float3(childidx>>2,1&(childidx>>1),1&childidx)*vHalfSize;
			iter=iIDX+1;
		}
	}
	if(retColor==0){
		discard;
	}
	return U32_F32(retColor);
//	return float4(1,0,0,0);
};

