// Fragment And Link Buffer
RWStructuredBuffer<uint>			SVOBuffer	: register( u1 );

// Start Offset Buffer
RWByteAddressBuffer					BrickBuffer	: register( u2 );

Texture2D		DiffuseTex		:	register(t0);

SamplerState	SS_WrapLine2	:	register(s0);

#define	MAX_DEPTH	9
#define VOXEL_BOUND_SIZE	pow(2,MAX_DEPTH-1)

struct VS_OUTPUT
{
    float4 Position     : SV_POSITION; // vertex position
	float3 Normal       : TEXCOORD0;
    float2 TextureUV    : TEXCOORD1;   // vertex texture coords 
	float3 Tangent		: TEXCOORD2;
	float4 WPos			: TEXCOORD3;
	float4 ProjPos		: TEXCOORD4;
};

#define	VOXEL_SIZE	4
#define INVALID_OFFSET	10000000

struct	PS_OUTPUT{
	float4	Diff			:	SV_Target0;
};

PS_OUTPUT main( VS_OUTPUT input )
{
	float4 color	=		DiffuseTex.Sample(SS_WrapLine2,input.TextureUV).xyzw;
	PS_OUTPUT	Output;
	Output.Diff	=	color;
	uint4 ucolor = saturate( color ) * 255;
	uint uiColor	=	(ucolor.b) | (ucolor.g << 8) | (ucolor.r << 16) | (ucolor.a << 24);
	
	float	fOffset	=	dot(frac(input.WPos.xyz+VOXEL_BOUND_SIZE)-float3(0.5,0.5,0.5),normalize(input.Normal.xyz));
	fOffset	+=	0.5;
	uint4	uiNormal		=	float4(normalize(input.Normal.xyz)*0.5+0.5,fOffset)*255;
	uint	uiNormalColor	=	(uiNormal.b) | (uiNormal.g << 8) | (uiNormal.r << 16) | (uiNormal.a << 24);

    uint3 VoxelIndex = (input.WPos.xyz+VOXEL_BOUND_SIZE);//-float3(-64,-64,-64);
	//uint mask	=	0x80;
	int	offset	=	0;
	[loop]
	for(int i=0;i<MAX_DEPTH;i++){
		uint3	maskValue	=	VoxelIndex>>(MAX_DEPTH-1-i);//mask;
		maskValue	=	maskValue&1;

		uint idx	=	(maskValue.x<<2)+(maskValue.y<<1)+maskValue.z;

		uint	address			=	(offset+idx)*VOXEL_SIZE;
		if(i==MAX_DEPTH-1){
			//SVOBuffer[offset+idx]	=		uiColor;
			uint uiRet=INVALID_OFFSET;
			BrickBuffer.InterlockedExchange(address,uiNormalColor,uiRet);
			SVOBuffer[offset+idx]	=	uiColor;
			return Output;			
		}
		uint	oldChildOffset	=	INVALID_OFFSET;
		

		BrickBuffer.InterlockedCompareExchange(address,0,INVALID_OFFSET,oldChildOffset);
		if(oldChildOffset	==	INVALID_OFFSET){
			oldChildOffset	=	BrickBuffer.Load(address);	
			if(oldChildOffset==INVALID_OFFSET){
				BrickBuffer.InterlockedCompareExchange(address,0,INVALID_OFFSET,oldChildOffset);
				if(oldChildOffset==INVALID_OFFSET){
					oldChildOffset	=	BrickBuffer.Load(address);	
					if(oldChildOffset==INVALID_OFFSET){
						BrickBuffer.InterlockedCompareExchange(address,0,INVALID_OFFSET,oldChildOffset);
						if(oldChildOffset==INVALID_OFFSET){
							//oldChildOffset	=	BrickBuffer.Load(address);
							//i=7;
							uint uiRet=INVALID_OFFSET;
							BrickBuffer.InterlockedAdd(16*1048576-1,1,uiRet);
						}
					}	
				}	
			}
		}else if(oldChildOffset	==	0){
				uint uVoxelCount = SVOBuffer.IncrementCounter()+1;
				oldChildOffset	=	uVoxelCount*8;
				BrickBuffer.InterlockedCompareStore(address,INVALID_OFFSET,oldChildOffset);
		}
		
		
		offset	=	oldChildOffset;

		//mask	=	mask>>	1;
	}


	return Output;
}


