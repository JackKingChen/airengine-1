// Fragment And Link Buffer
RWStructuredBuffer<uint>			SVOBuffer	: register( u0 );

// Start Offset Buffer
RWByteAddressBuffer					BrickBuffer	: register( u1 );

Texture2D		DiffuseTex		:	register(t0);

SamplerState	SS_WrapLine2	:	register(s0);

struct VS_OUTPUT
{
    float4 Position     : SV_POSITION; // vertex position
	float3 Normal       : TEXCOORD0;
    float2 TextureUV    : TEXCOORD1;   // vertex texture coords 
	float3 Tangent		: TEXCOORD2;
	float4 WPos			: TEXCOORD3;
	float4 ProjPos		: TEXCOORD4;
};

#define	VOXEL_SIZE	4

void main( VS_OUTPUT input )
{
	float4 color	=		DiffuseTex.Sample(SS_WrapLine2,input.TextureUV).xyzw;
	uint4 ucolor = saturate( color ) * 255;
	uint uiColor	=	(ucolor.x) | (ucolor.y << 8) | (ucolor.z << 16) | (ucolor.a << 24);
	
    uint3 VoxelIndex = input.Position.xyz;
	int mask	=	0x100;
	int	offset	=	0;
	for(int i=0;i<9;i++){
		int idx	=	(VoxelIndex.x&mask)<<2;
		idx		+=	(VoxelIndex.y&mask)<<1;
		idx		+=	(VoxelIndex.z&mask);
		if(i==8){
			SVOBuffer[offset+idx]	=		uiColor;
			return;			
		}
		uint	oldChildOffset	=	0xffffffff;
		uint	address			=	(offset+idx)*VOXEL_SIZE;

		BrickBuffer.InterlockedCompareExchange(address,0,0xffffffff,oldChildOffset);
		if(oldChildOffset	==	0xffffffff){
			uint    uiLoopCount	=	0;
			[unroll]
			while(oldChildOffset==0xffffffff&&uiLoopCount < 10){
				uiLoopCount++;
				oldChildOffset	=	BrickBuffer.Load(address);	
			}
		}else if(oldChildOffset	==	0){
				uint uVoxelCount = SVOBuffer.IncrementCounter();
				BrickBuffer.InterlockedCompareExchange(address,0xffffffff,uVoxelCount*8,oldChildOffset);
		}
		
		
		offset =	oldChildOffset;

		mask	=	mask>>1;
	}
}


