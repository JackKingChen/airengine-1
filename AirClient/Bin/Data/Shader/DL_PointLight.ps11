cbuffer cbPerCamera : register( b1 )
{
    matrix  ViewProjection;
	float4	vCameraDir;
	float4	vCameraPosition;
	float4	vCameraUp;
	float4	vVP_NearFar;
   
}

cbuffer cbPerMaterial : register( b3 )
{
    
	float3	vPos;
	float	fSize;
	float4	vColor;
	matrix  InvViewProj;
   
}
Texture2D		DepthTex		:	register(t0);
Texture2D		NormalTex		:	register(t1);
SamplerState	SS_WarpPoint	:	register(s0);
struct VS_OUTPUT
{
	float4 ProjPos		: TEXCOORD0;
    float4 Position     : SV_POSITION; // vertex position
};

float3	PBRDF(float3 N,float3	L,float3 E,float fShiness){
   float fn         =   fShiness;//*tex2D(baseMap_1,Input.Texcoord).x;
   
   float3 H         = normalize( E+L);
   float   NL       =   dot(N,L) ;
   float   NH       =   dot(N,H) ;
   float   EH       =   dot(E,H);
   float   NE       =   dot(N,E);
   
   float f0   =   pow((1-fn)/(1+fn),2);
   
   float	Fambient	=	f0+(1-f0)*pow(1-abs(NE),5);
   float   Fdiff   =   f0+(1-f0)*pow(1-NL,5);
   float   Fspec   =   f0+(1-f0)*pow(1-EH,5);
   
   float   diff   =   NL*saturate(1-Fdiff);//*pow(c,2.2);
   float   n      =   fn;
   float   spec   =   (0.0397436*n+0.0856832)*Fspec*pow(saturate(NH),n)/max(NL,NE);
    

   return float3(max(diff,0),max(spec,0),saturate(1-Fambient));
};

float4 main( VS_OUTPUT input ):SV_Target
{
    VS_OUTPUT Output;

	float4 pos	=	input.ProjPos/input.ProjPos.w;
	
	float2	uv	=	pos.xy*float2(0.5,-0.5)+0.5;
	float	z	=	DepthTex.Sample(SS_WarpPoint,uv).x;

	float4	vWorldPos	=	mul(InvViewProj,float4(pos.xy,z,1));
	vWorldPos/=vWorldPos.w;

	float3 vLightDir	=	vWorldPos.xyz	-	vPos;
	if(length(vLightDir)	>	fSize)
	{
		discard;//return float4(1,0,0,0);///length(vLightDir);
	}

	float3 L	=	normalize(vLightDir);

	float4	NormalColor	=	NormalTex.Sample(SS_WarpPoint,uv);
	float3	N			=	NormalColor.xyz*2-1;
	float3	E			=	normalize(vCameraPosition.xyz	-vWorldPos.xyz);
	
	float3 vRet			=	PBRDF(N,-L,E,pow(abs(NormalColor.w),2.2f)*127+1);

	float4	f			=	dot(vRet.xy,1)*vColor*pow((1-length(vLightDir)/fSize),2);
    return f;    
}