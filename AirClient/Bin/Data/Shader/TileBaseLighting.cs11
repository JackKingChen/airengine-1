#define	NUMBER_BLOCK_WIDTH	16
#define	NUMBER_THREAD		(NUMBER_BLOCK_WIDTH*NUMBER_BLOCK_WIDTH)
#define	HALF_NUMBER_THREAD	(NUMBER_THREAD/2)
#define	LAYERED

cbuffer cbPerCamera : register( b1 )
{
    matrix  ViewProjection;
	float4	vCameraDir;
	float4	vCameraPosition;
	float4	vCameraUp;
	float4	vVP_NearFar;
   
};
cbuffer	cbPerMaterial	: register( b3 )
{
	float4	RTWidthHeight;
	float4x4 matViewProjInv;
	float4x4 matView;
	float4	mouse;
}

struct PointLightInfo{
	float4 Pos_Size;
	float3 Color;
};

Texture2D							DepthTex		:	register(t0);
Texture2D							NormalTex		:	register(t1);
StructuredBuffer<PointLightInfo>	LightBuffer		:	register(t2);
RWTexture2D<float4>					OutLightTex		:	register(u0);

groupshared PointLightInfo	tempLightBuffer[NUMBER_THREAD];
groupshared	int				tempLightCount;
groupshared float	tempDepth[NUMBER_THREAD];
groupshared float4	tempPos[5];
groupshared float	tempAngle;
groupshared uint	minDepth;
groupshared uint	maxDepth;

#ifdef LAYERED
struct LayerInfo{
	float	fNear;
	float	fFar;
	uint	uiOffset;
	uint	uiSize;
};
StructuredBuffer<LayerInfo>	LayerBuffer		:	register(t3);
groupshared	uint			layerArray[NUMBER_THREAD];
groupshared uint			uiLayerCount;
#endif

float4 Vertex3_Plane(float3 v1,float3 v2,float3 v3){
	float3	aux1 = v1 - v2;
	float3	aux2 = v1 - v3;
	float4 plane;
	plane.xyz = (cross((aux1),(aux2)));

	normalize(plane.xyz);

	plane.w = dot((plane.xyz),v1);
	return plane;
}

bool IsOutSide(float4 plane,float4 sphere){
	return (sphere.w < dot(plane.xyz,sphere.xyz));
}

float2 UV_XY(float2 uv){
	return uv*float2(2,-2)+float2(-1,1);
}

bool	IntersectTile(float4 light,float fNear,float fFar,float3 vCenter){

	float	zDepth			=	light.z;
	float	fSize			=	light.w;
	float	fLightLength	=	length(light.xyz);
	float	SphereAngle		=	asin(fSize/fLightLength);

	if(fSize>fLightLength){
		float3 vNear	=	(vCenter/vCenter.z)*fNear;
		if(distance(vNear,light.xyz)<fSize){
			return true;
		}
	}else{
		if(SphereAngle+tempAngle >	acos(dot(normalize(light.xyz),vCenter))){
			if(zDepth+fSize > fNear&& zDepth-fSize < fFar){
				return true;
			}
		}	
	}
	return false;
}

float3	PBRDF(float3 N,float3	L,float3 E,float fShiness){
   float fn         =   fShiness;//*tex2D(baseMap_1,Input.Texcoord).x;
   
   float3 H         = normalize( E+L);
   float   NL       =   dot(N,L) ;
   float   NH       =   dot(N,H) ;
   float   EH       =   dot(E,H);
   float   NE       =   dot(N,E);
   
   float f0   =   pow((1-fn)/(1+fn),2);
   
   float	Fambient	=	f0+(1-f0)*pow(1-abs(NE),5);
   float   Fdiff   =   f0+(1-f0)*pow(1-NL,5);
   float   Fspec   =   f0+(1-f0)*pow(1-EH,5);
   
   float   diff   =   NL*saturate(1-Fdiff);//*pow(c,2.2);
   float   n      =   fn;
   float   spec   =   (0.0397436*n+0.0856832)*Fspec*pow(saturate(NH),n)/max(NL,NE);
    

   return float3(max(diff,0),max(spec,0),saturate(1-Fambient));
};

[numthreads(NUMBER_BLOCK_WIDTH, NUMBER_BLOCK_WIDTH, 1)]
void	main(
	uint3	Gid		:	SV_GroupID,
	uint3	GTid	:	SV_GroupThreadID,
	uint3	DTid	:	SV_DispatchThreadID)
{
	//Calc Min Max Depth
	uint	GIndex		=	GTid.y*NUMBER_BLOCK_WIDTH+GTid.x;
	float	fDepth		=	DepthTex.Load(DTid.xyz);
	
	float4	Nor			=	NormalTex.Load(DTid.xyz);
	float3 N=Nor.xyz*2-1;
	N					=	mul((float3x3)matView,N);

	float2	uv			=	((float2)DTid.xy+0.5)/RTWidthHeight.xy;

	float2 mousepos		=	mouse/RTWidthHeight.xy;
	mousepos.y	=	1-mousepos.y;


	uv.y	=	1-uv.y;
	float4	projpos		=	float4(uv*2-1,fDepth,1); 
	float4  wpos				=	mul(matViewProjInv,projpos);
	wpos/=wpos.w;

	minDepth	=	0xffffffff;
	maxDepth	=	0;
	GroupMemoryBarrierWithGroupSync(); 
	uint uiCurrentDepth	=	asuint(wpos.z*1000);
	InterlockedMin(minDepth,uiCurrentDepth);
	InterlockedMax(maxDepth,uiCurrentDepth);
	GroupMemoryBarrierWithGroupSync(); 

	
	float	fNear	=	asfloat(minDepth)*0.001;
	float	fFar	=	asfloat(maxDepth)*0.001;//tempDepth[NUMBER_THREAD-1];
	float fLast;
	//uint	DIndex	=	DTid.y*RTWidthHeight.x+DTid.x;
	//InterlockedExchange(OutLightTex[DTid.xy],(fFar-fNear)*0.1,fLast);
	//Calc Quad Vertex Pos
	float4 vQuadProjPos[5]={
		float4(Gid.xy+float2(0.5,0.5),1,1),
		float4(Gid.xy,1,1),
		float4(Gid.xy+float2(1,0),1,1),
		float4(Gid.xy+float2(1,1),1,1),
		float4(Gid.xy+float2(0,1),1,1)
		};
	if(GIndex<5){
		float4 temp		=	vQuadProjPos[GIndex]*float4(NUMBER_BLOCK_WIDTH,NUMBER_BLOCK_WIDTH,1,1);
		temp.xy			=	(temp.xy)/	RTWidthHeight.xy;
		temp.xy			=	UV_XY(temp.xy);
		temp.xy			*=	RTWidthHeight.zw;
//		float4 vTemp	=	mul(matViewProjInv,float4(UV_XY(temp.xy),temp.zw));
//		vTemp/=vTemp.w;
		//normalize(vTemp.xyz);
		tempPos[GIndex]	=	float4(normalize(temp.xyz),1);
	}
	tempAngle = 0;
	GroupMemoryBarrierWithGroupSync();
	//Calc Plane Normal Distance
	float3 vCenter = tempPos[0];
	if(GIndex==0){
		
		float4 angle;
		angle.x	=	(dot((tempPos[1].xyz),vCenter));//	=	Vertex3_Plane(float3(0,0,0),tempPos[GIndex].xyz,tempPos[nextIndex].xyz);
		angle.y	=	(dot((tempPos[2].xyz),vCenter));
		angle.z	=	(dot((tempPos[3].xyz),vCenter));
		angle.w	=	(dot((tempPos[4].xyz),vCenter));	
		tempAngle	=	acos(min(min(angle.x,angle.y),min(angle.z,angle.w)));
	}
#ifdef LAYERED
	uiLayerCount	=	0;
#endif
	GroupMemoryBarrierWithGroupSync();

#ifdef LAYERED
	LayerInfo	layer	=	LayerBuffer[GIndex];
	if(	fNear	<	layer.fFar	&&
		fFar	>	layer.fNear	&&
		layer.uiSize	>	0)
	{	
		float oldValue;
		InterlockedAdd(uiLayerCount,1,oldValue);
		layerArray[oldValue]	=	GIndex;

	}
	GroupMemoryBarrierWithGroupSync();
#endif
	//OutLightTex[DTid.xy]	=	0.01*(float)uiLayerCount;
	//return;
	float4 Color=0;
#ifdef LAYERED
	[loop]
	for(uint iLayer=0;iLayer<uiLayerCount;iLayer++){
		LayerInfo	templayer	=	LayerBuffer[layerArray[iLayer]];
		uint	uiLightCount	=	templayer.uiSize;
		uint	uiOffset		=	templayer.uiOffset;
#else
		uint	uiLightCount	=	mouse.z;
		uint	uiOffset		=	0;
#endif

		uint	uiPassCount		=	(uiLightCount+255)>>8;
		[loop]
		for(uint iBase=0;iBase<uiPassCount;iBase++){
			tempLightCount=0;
			GroupMemoryBarrierWithGroupSync();
			uint iLightBase		=	iBase*NUMBER_THREAD+GIndex;
			uint iLightIndex	=	uiOffset+iLightBase;
			if(iLightBase	<	uiLightCount){
				PointLightInfo linfo	=	LightBuffer[iLightIndex];
			
	
				if(IntersectTile(linfo.Pos_Size,fNear,fFar,vCenter)){
					float oldValue;
					InterlockedAdd(tempLightCount,1,oldValue);
					tempDepth[oldValue]	=	iLightIndex;
				}
			}
			GroupMemoryBarrierWithGroupSync();
			[loop]
			for(uint i=0;i<tempLightCount;i++){
				PointLightInfo lightinfo	=	LightBuffer[tempDepth[i]];
	
				float3 LDir	=	lightinfo.Pos_Size.xyz-wpos.xyz;
				float3 L	=	normalize(LDir);
				float3 Shading	=	PBRDF(normalize(N),L,-normalize(wpos.xyz),Nor.w*127+1);
				Color.xyz	+=	lightinfo.Color*((Shading.y+Shading.x)*pow(saturate(1-length(LDir)/lightinfo.Pos_Size.w),2));//*saturate(1-length(LDir)/lightinfo.Pos_Size.w);
			
			}
			
			GroupMemoryBarrierWithGroupSync();
		}	

	
#ifdef LAYERED
		//GroupMemoryBarrierWithGroupSync();
	}
#endif
	OutLightTex[DTid.xy]=Color;//(float)tempLightCount*0.25f;

}