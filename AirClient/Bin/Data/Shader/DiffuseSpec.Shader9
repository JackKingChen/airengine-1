//	Shader	Param	Infomation
//
//	0-3	WorldMatrix
//	4-7	ViewProjMatrix
//	8		Diffuse
//	9		Specular
//
float4	Param[10];

struct VS_INPUT 
{
   float4 Position : POSITION0;
   float4 Normal   : NORMAL0;
   float2 Texcoord : TEXCOORD0;
   
};

struct VS_OUTPUT 
{
   float4 Position 			: POSITION0;
   float2 Texcoord 			: TEXCOORD0;
   float4 WorldNormal   : TEXCOORD1;
   float4	Depth					:	TEXCOORD2;
   
};


VS_OUTPUT mainvs( VS_INPUT Input )
{
   VS_OUTPUT Output;
   float4x4	World				=	float4(Param[0],Param[1],Param[2],Param[3]);
   float4x4	ViewProj		=	float4(Param[4],Param[5],Param[6],Param[7]);
   
   float4	WorldPos			=	mul( Input.Position,World);
   
   Output.Position			= mul( WorldPos,ViewProj);
   Output.Depth					= Output.Position;
   Output.WorldNormal 	= mul(float4(Input.Normal.xyz,0),World);
   Output.Texcoord 			= Input.Texcoord;

   return( Output );
   
};


sampler	DiffMap:	register(s0);
sampler	SpecMap:	register(s1);



struct	PS_OUTPUT{
	float4	Depth				:	COLOR0;
	float4	WorldNormal	:	COLOR1;
	float4	Diffuse			:	COLOR2;
};

PS_OUTPUT mainps( VS_OUTPUT Input ){

	PS_OUTPUT	Out;
	
	float4	fvColor					=	tex2D(DiffMap,Input.Texcoord);
	float4	fvSpec					=	tex2D(SpecMap,Input.Texcoord);
	
	Out.Depth								=	float4(Input.Depth.z/Input.Depth.w,0,0,1);
  Out.WorldNormal         = float4(normalize( Input.WorldNormal.xyz )*0.5f+0.5f,Param[9].x*fvSpec.x);
  Out.Diffuse							=	Param[8]*float4(fvColor.xyz,1);
  return	Out;
}

