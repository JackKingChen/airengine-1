cbuffer cbPerCamera : register( b1 )
{
    matrix  ViewProjection;
	float4	vCameraDir;
	float4	vCameraPosition;
	float4	vCameraUp;
	float4	vVP_NearFar;
   
}
cbuffer	cbPerObject	:	register(b2)
{
	 matrix  World;
}

cbuffer cbPerSkeleton	:	register(b4)
{
	matrix	BoneMatrix[256];
}

struct VS_INPUT
{
    float4 Position     : POSITION; // vertex position 
	float4 BoneWeight	: BLENDWEIGHT;
	int4   BoneIndex	: BLENDINDICES;
    float3 Normal       : NORMAL;   // this normal comes in per-vertex
    float2 TextureUV    : TEXCOORD0;// vertex texture coords
	float3 Tangent		: TANGENT;
};

struct VS_OUTPUT
{
    float4 Position     : SV_POSITION; // vertex position
	float3 Normal       : TEXCOORD0;
    float2 TextureUV    : TEXCOORD1;   // vertex texture coords 
	float3 Tangent		: TEXCOORD2;
	float4 WPos			: TEXCOORD3;
	float4 ProjPos		: TEXCOORD4;
};

VS_OUTPUT main( VS_INPUT input )
{
    VS_OUTPUT Output;

	float3	BoneSpacePos	=	input.Position.xyz;
	float4x4 matBoneMatrix	=	0;
	for(int i=0;i<4;i++){
		int index	=	input.BoneIndex[i];
		matBoneMatrix	+=	BoneMatrix[index]*input.BoneWeight[i];
	}
	float4x4	matWorld	=	mul(World,matBoneMatrix);
    
	float4 wpos		=	mul( matWorld,input.Position);
    // Transform the position from object space to homogeneous projection space
    Output.Position =	mul( ViewProjection ,wpos);
    Output.WPos		=	wpos;
	Output.ProjPos	=	Output.Position;
    // Transform the normal from object space to world space    
    Output.Normal		=	mul((float3x3)matWorld,input.Normal); // normal (world space)
	Output.TextureUV	=	input.TextureUV;
	Output.Tangent		=	mul((float3x3)matWorld,input.Tangent);

    
    return Output;    
}