//	Shader	Param	Infomation
//
//	0-3	WorldMatrix
//	4-7	ViewProjMatrix
//	8		Diffuse
//	9		Specular
//
cbuffer	Param
{
	float4x4	World;
	float4x4	ViewProj;
	float4		Diffuse;
	float4		Specular;
};

struct VS_INPUT 
{
   float4 Position : POSITION;
   float4 Normal   : NORMAL0;
   float2 Texcoord : TEXCOORD0;
   
};

struct VS_OUTPUT 
{
   float4 Position 		: SV_POSITION;
   float2 Texcoord 		: TEXCOORD0;
   float4 WorldNormal : TEXCOORD1;
   float4	Depth				:	TEXCOORD2;
};


VS_OUTPUT mainvs( VS_INPUT Input )
{
   VS_OUTPUT Output;
   
   float4	WorldPos		=	mul( Input.Position,World);

   Output.Position 		= mul( WorldPos,ViewProj);
   Output.Depth 			= Output.Position;
   Output.WorldNormal = mul(float4(Input.Normal.xyz,0),World);
   Output.Texcoord 		= Input.Texcoord;

   return( Output );
   
};

Texture2D			DiffTex		:	register	(t0);
SamplerState 	diffState	:	register	(s0);
Texture2D			SpecTex		:	register	(t1);

struct	PS_OUTPUT{
	float4	Depth				:	SV_Target0;
	float4	WorldNormal	:	SV_Target1;
	float4	Diffuse			:	SV_Target2;
};

PS_OUTPUT mainps( VS_OUTPUT Input ){

	PS_OUTPUT	Out;
	
	float4	fvColor			=	DiffTex.Sample( diffState,Input.Texcoord);
	float4	fvSpec			=	SpecTex.Sample( diffState,Input.Texcoord);

	Out.Depth						=	float4(Input.Depth.z/Input.Depth.w,0,0,1);
  Out.WorldNormal     = float4(normalize( Input.WorldNormal.xyz )*0.5f+0.5f,Specular.x*fvSpec.x);
  Out.Diffuse					=	Diffuse*float4(fvColor.xyz,1);
  return	Out;
   
}



