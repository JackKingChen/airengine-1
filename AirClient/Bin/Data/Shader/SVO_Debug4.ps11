//#include "Common.h"
ByteAddressBuffer	voxeloctree		:	register(t0);
cbuffer cbPerCamera : register( b1 )
{
    matrix  ViewProjection;
	float4	vCameraDir;
	float4	vCameraPosition;
	float4	vCameraUp;
	float4	vVP_NearFar;
   
}
cbuffer cbPerMaterial	:	register(b3)
{
	matrix	matViewProjInv;
	uint	uiOrder;
;
}

#define RAYCAST_OPTIMIZE


struct StackInfo{
	uint	ChildIndex;
	uint	ChildMask;
	uint	Offset;
	float	fIntersect[5];
};

void	SwapLess(inout float f0,inout float f1)
{
	if(f1 < f0){
		float fTemp;
		fTemp	=	f0;
		f0		=	f1;
		f1		=	fTemp;
	}
}

uint	DistanceToChildIndex(float fDis,float3 vStart,float3 vDir){
	return	dot((fDis*vDir-vStart)>0,uint3(4,2,1));
};
uint	DistanceToChildColor(float fDis,float3 vStart,float3 vDir){
	uint3 m	=	(fDis*vDir-vStart)>0;
	uint r=0;
	if(m.x==1){
		r|=0x00ff0000;
	}
	if(m.y==1){
		r|=0x0000ff00;
	}
	if(m.z==1){
		r|=0x000000ff;
	}
	return	r;
};
bool RayCast( float3 vStart,float3 vDir,float3 vMin,float3 vMax,inout float2 fMinMax)
{

      float3   subMin   =   vMin   -   vStart;
      float3   subMax   =   vMax   -   vStart;

      float3   invMin   =   subMin/vDir;
      float3   invMax   =   subMax/vDir;
      
      float3   fNear     =   min(invMin,invMax);
      float3   fFar     =   max(invMin,invMax);
      
      float   maxNear      =   max(max(fNear.x,fNear.y),fNear.z);
      float   minFar      =   min(min(fFar.x,fFar.y),fFar.z);
      
      if(maxNear > minFar	||	maxNear	>	fMinMax.y || minFar	<	0.0f){
         return false;
      };
	  fMinMax	=	float2(maxNear,minFar);
	  if(fMinMax.x	<	0)
	  	fMinMax.x	=	0;
	  return true;
}
void RayCast( float3 vStart,float3 vDir,float3 vMin,float3 vMax,float2 fMinMax,inout float fIntersect[5],inout uint uiOutChildMask)
{
    float3   BoxCenter =	((vMin+vMax)*0.5-vStart);
    float3   vCenter   =	BoxCenter/vDir;

	//Stort Element
	fIntersect[0]				=	fMinMax.x;
	
    uint	uiChildCount=1;
    float3 vNegetive   =  (vCenter>fMinMax.x)*(vCenter<fMinMax.y);
	for(int i=0;i<3;i++){
		if(vNegetive[i]>0.5){
			fIntersect[uiChildCount]=vCenter[i];
			uiChildCount++;
		}
	}
	fIntersect[uiChildCount]	=	fMinMax.y;
	uiChildCount--;
	//Sort Element
	if(uiChildCount>1){
		SwapLess(fIntersect[1],fIntersect[2]);
		if(uiChildCount	>	2){
			SwapLess(fIntersect[1],fIntersect[3]);
			SwapLess(fIntersect[2],fIntersect[3]);
		}
	}

	

	const static uint	uiMask[4]={
		0xffffff00,
		0xffff0000,
		0xff000000,
		0x00000000
	};

	uiOutChildMask		=	DistanceToChildIndex(fMinMax.x,BoxCenter,vDir)	|	uiMask[uiChildCount];
	uint	FarChild	=	DistanceToChildIndex(fMinMax.y,BoxCenter,vDir);

	switch(uiChildCount){
		case 2:{
			float		fIntersectDis	=	(fIntersect[1]+fIntersect[2])*0.5f;
			uiOutChildMask		|=	DistanceToChildIndex(fIntersectDis,BoxCenter,vDir)<<8;
		}break;
		case 3:{
			float3 vDis =	float3(dot(vCenter.xy,0.5),dot(vCenter.yz,0.5),dot(vCenter.xz,0.5));
			float2 xy   =   float2(min(min(vDis.x,vDis.y),vDis.z),max(max(vDis.x,vDis.y),vDis.z));
			uiOutChildMask		|=	DistanceToChildIndex(xy.x,BoxCenter,vDir)<<8;
			uiOutChildMask		|=	DistanceToChildIndex(xy.y,BoxCenter,vDir)<<16;
		}break;
	}
	if(uiChildCount>0){
		uiOutChildMask				|=	(FarChild<<(uiChildCount*8));
	}


}


struct VS_OUTPUT
{
    float4 Position     : SV_POSITION; // vertex position
	float2 UV			: TEXCOORD0;
};

struct	PS_OUTPUT{
	float4	Diff			:	SV_Target0;
};

float4	U32_F32(uint uiColor){
	return	float4(
					((uiColor&0x00ff0000)>>16)/255.0f,
					((uiColor&0x0000ff00)>>8)/255.0f,
					((uiColor&0x000000ff))/255.0f,
					((uiColor&0xff000000)>>24)/255.0f
			);
}
#define	MAX_DEPTH	7
#define VOXEL_BOUND_SIZE	pow(2,MAX_DEPTH-1);

float4 main( VS_OUTPUT Input ):SV_Target0{
	float2 xy	=	Input.UV*float2(2,-2)+float2(-1,1);
	float4	wpos	=	mul(matViewProjInv,float4(xy,1,1));
	wpos/=wpos.w;
	float3 vStart	=	vCameraPosition.xyz;
	float3 vDir	=	normalize(wpos.xyz	-	vStart	);



	//x Stack Child Start Index
	//y child visiable mask
	//z Node Offset
	StackInfo Stack[10]={
		{0,0xffffffff,0,0,0,0,0,0},
		{0,0xffffffff,0,0,0,0,0,0},
		{0,0xffffffff,0,0,0,0,0,0},
		{0,0xffffffff,0,0,0,0,0,0},
		{0,0xffffffff,0,0,0,0,0,0},
		{0,0xffffffff,0,0,0,0,0,0},
		{0,0xffffffff,0,0,0,0,0,0},
		{0,0xffffffff,0,0,0,0,0,0},
		{0,0xffffffff,0,0,0,0,0,0},
		{0,0xffffffff,0,0,0,0,0,0}
	};

	const static float3 vOffset[8]={
		float3(0,0,0),
		float3(0,0,1),
		float3(0,1,0),
		float3(0,1,1),

		float3(1,0,0),
		float3(1,0,1),
		float3(1,1,0),
		float3(1,1,1)
	};
	uint	uiDepth	=	0;
	float3	vHalfSize	=	VOXEL_BOUND_SIZE;
	float3  vMin		=	-vHalfSize;
	float2	fMinMax		=	float2(0,10000);
	float3	vMax	=	vMin+vHalfSize*2;
	if(!RayCast(vStart,vDir,vMin,vMax,fMinMax)){
		return 0;
	}
	//	clip(ret.x-0.5f);
	//return U32_F32(ret.y>>8)*32.0f;
	uint retColor=0;
	//[loop]
	while(true){
		//First Time Enter This Node,Need Ray_AABB Intersect
		if(Stack[uiDepth].ChildMask	==	0xffffffff){
			float3	vMax	=	vMin+vHalfSize*2;
			RayCast(vStart,vDir,vMin,vMax,fMinMax,Stack[uiDepth].fIntersect,Stack[uiDepth].ChildMask);
		}

		StackInfo stack	=	Stack[uiDepth];
		
		//Return To Parent
		if(stack.ChildIndex	>=4	){
			//Not Found Any Leaf
			if(uiDepth==0){
				retColor=0xff888888;
				break;
			}
			uiDepth--;

			stack	=	Stack[uiDepth];
			
			uint childidx	=	(stack.ChildMask>>((stack.ChildIndex-1)*8))&0xff;
			fMinMax			=	float2(stack.fIntersect[stack.ChildIndex],stack.fIntersect[stack.ChildIndex+1]);
			vHalfSize*=2.0f;
			vMin	-=	vOffset[childidx]*vHalfSize;
			
			continue;
		}
		
		uint iChildIndex	=	 (stack.ChildMask>>(stack.ChildIndex*8))&0xff;
		
		//No Child	Return To Parent
		if(iChildIndex==0xff){
			Stack[uiDepth].ChildIndex	=	4;
			continue;
		}

		uint addr			=	(stack.Offset+iChildIndex)*4;
		uint uiChildOffset	=	voxeloctree.Load(addr);

		//Child Empty
		if(uiChildOffset==0){
			Stack[uiDepth].ChildIndex++;
			continue;
		}

		//It is Leaf
		if(uiDepth	==	3){
			retColor=stack.ChildMask;
			//return U32_F32(retColor);
			break;
		}else{
			fMinMax						=	float2(stack.fIntersect[stack.ChildIndex],stack.fIntersect[stack.ChildIndex+1]);
			stack.ChildIndex++;
			uiDepth++;
			Stack[uiDepth].ChildIndex	=	0;
			Stack[uiDepth].ChildMask	=	0xffffffff;
			Stack[uiDepth].Offset		=	uiChildOffset;
			
			vMin		+=	vOffset[iChildIndex]*vHalfSize;	
			vHalfSize	/=	2.0f;
			
		
		}

		
	}
	//discard;
	//return retColor;
	return U32_F32(retColor);
//	return float4(1,0,0,0);
};