//	Shader	Param	Infomation
//
//	0-3	WorldMatrix
//	4-7	ViewProjMatrix
//	8		Diffuse
//	9		Specular
//
cbuffer	Param
{
	float4x4	World;
	float4x4	ViewProj;
	float4		Diffuse;
	float4		Specular;
};

struct	VS_INPUT_NOR{
	float4 Position : POSITION;
	float4 Normal   : NORMAL0;
	float2 Texcoord : TEXCOORD0;
	float3 Tan 			: TANGENT;
};

struct VS_OUTPUT_NOR
{
   float4 Position 			: SV_POSITION;
   float2 Texcoord 			: TEXCOORD0;
   float4 WorldNormal   : TEXCOORD1;
   float4	Depth					:	TEXCOORD2;
   float4	WorldTan			:	TEXCOORD3;
   
};


VS_OUTPUT_NOR mainvs( VS_INPUT_NOR Input )
{
   VS_OUTPUT_NOR Output;
   
   float4	WorldPos		=	mul( Input.Position,World);

   Output.Position 		= mul( WorldPos,ViewProj);
   Output.Depth 			= Output.Position;
   Output.WorldNormal = mul(float4(Input.Normal.xyz,0),World);
   Output.WorldTan		=	mul(float4(Input.Tan.xyz,0),World);
   Output.Texcoord 		= Input.Texcoord;

   return( Output );
   
};
SamplerState 	diffState	:	register	(s0);

Texture2D			DiffTex		:	register	(t0);
Texture2D			SpecTex		:	register	(t1);
Texture2D			NormTex		:	register	(t2);

struct	PS_OUTPUT{
	float4	Depth				:	SV_Target0;
	float4	WorldNormal	:	SV_Target1;
	float4	Diffuse			:	SV_Target2;
};

PS_OUTPUT mainps( VS_OUTPUT_NOR Input ){

	PS_OUTPUT	Out;
	
	float4	fvColor					=	DiffTex.Sample( diffState,Input.Texcoord);
	float4	fvSpec					=	SpecTex.Sample( diffState,Input.Texcoord);
	float4	fvNorm					=	NormTex.Sample( diffState,Input.Texcoord);
	
	float3	wNor						=	normalize(Input.WorldNormal.xyz);
	float3	wTan						=	normalize(Input.WorldTan.xyz);
	
	float3	normal					=	(2*fvNorm.xyz)-1;
	
	float3 	BiNorm 					= normalize( cross( wNor, wTan ) );
  float3x3 BTNMatrix 			= float3x3( BiNorm, wTan, wNor );
  float3	FinalNorm 			= normalize( mul( normal, BTNMatrix ) ); //world space bump

	Out.WorldPos						=	float4(Input.Depth.z/Input.Depth.w,0,0,fvColor.w);
  Out.WorldNormal         = float4(FinalNorm*0.5f+0.5f,fvSpec.x*Specular.x);
  Out.Diffuse							=	Diffuse*float4(fvColor.xyz,1);
  
  return	Out;
   
};





