struct VS_OUTPUT
{
    float4 Position     : SV_POSITION; // vertex position
	float3 Normal       : TEXCOORD0;
    float2 TextureUV    : TEXCOORD1;   // vertex texture coords 
	float4 Tangent		: TEXCOORD2;
	float4 WPos			: TEXCOORD3;
	float4 ProjPos		: TEXCOORD4;
};

cbuffer	material_buffer		:	register(b3)
{
	float4	Emissive;
	float4	Ambient;
	float4	Diffuse;
	float4	Specular;
};

Texture2D		diffuseTex	:	register(t0);
SamplerState	line3State	:	register(s0);

float4 main( VS_OUTPUT input) : SV_TARGET
{ 
	float	fDot		=	dot(input.Normal,normalize(float3(0,1,0)));
	float4	color		=	(Ambient+fDot*Diffuse);
	float4	baseColor	=	diffuseTex.Sample(line3State,input.TextureUV);
    return Emissive	+	color*baseColor;
}