cbuffer cbPerCamera : register( b1 )
{
    matrix  ViewProjection;
	float4	vCameraDir;
	float4	vCameraPosition;
	float4	vCameraUp;
	float4	vVP_NearFar;
    
};

cbuffer cbPerMaterial		: register( b3 )
{
    matrix  mViewProjectionInv;
	matrix	mShadowViewProj;
	matrix  mShadowViewProjInv;
   float4	vRTSize;
   float4   vViewPos;
};

struct VS_OUTPUT
{
    float4 Position     : SV_POSITION; // vertex position
	float2 UV			: TEXCOORD0;
};

struct	PS_OUTPUT{
	float4	Color				:	SV_Target0;
};

Texture2D	ShadowDepthTex		:	register(t0);
Texture2D	MRTDepthTex			:	register(t1);
Texture2D	Tex2x2				:	register(t2);
Texture2D	MRTNormalTex		:	register(t3);

SamplerState	SS_BorderLine2	:	register(s0);
SamplerState	SS_WrapLine2	:	register(s1);
SamplerState	SS_WrapPoint2	:	register(s2);


float2 UV_XY(float2 uv){
	return	uv*float2(2,-2)+float2(-1,1);
};
#define SHADOW_SAMPLE_NUMBER 6

float2 XY_UV(float2 xy){
	return	xy*float2(0.5,-0.5)+0.5;
};


#if SHADOW_SAMPLE_NUMBER == 6
const static	float2 offset[SHADOW_SAMPLE_NUMBER]={
#if 1
float2(2.5,1.5),

float2(2.5,-1.5),
float2(3.5,-4.5),

float2(-0.5,-5.5),
float2(-6.5,-5.5),

float2(-7.5,0.5),
#else
//float2(0,1),
float2(2,2),

float2(2,-1),
float2(4,-4),

float2(0,-5),
float2(-6,-6),

float2(-7,0),
//float2(-8,8)
#endif
};
#elif	SHADOW_SAMPLE_NUMBER	== 32
const static	float2 offset[32]={
float2(0.000000,1.000000),
float2(0.390181,1.961571),
float2(1.148050,2.771639),
float2(2.222281,3.325878),
float2(3.535534,3.535534),
float2(4.988818,3.333421),
float2(6.467157,2.678784),
float2(7.846282,1.560722),
float2(9.000000,-0.000000),
float2(9.807853,-1.950903),
float2(10.162675,-4.209519),
float2(9.977634,-6.666844),
float2(9.192388,-9.192388),
float2(7.777983,-11.640575),
float2(5.740249,-13.858194),
float2(3.121445,-15.692565),
float2(-0.000001,-17.000000),
float2(-3.511629,-17.654135),
float2(-7.270985,-17.553711),
float2(-11.111406,-16.629391),
float2(-14.849245,-14.849240),
float2(-18.292335,-12.222540),
float2(-21.249233,-8.801712),
float2(-23.538846,-4.682169),
float2(-25.000000,0.000000),
float2(-25.500417,5.072351),
float2(-24.944745,10.332457),
float2(-23.281145,15.555972),
float2(-20.506089,20.506103),
float2(-16.667109,24.944088),
float2(-11.863186,28.640266),
float2(-6.242887,31.385130),
};

#endif

float3	PBRDF(float3 N,float3	L,float3 E,float fShiness){
   float fn         =   fShiness;//*tex2D(baseMap_1,Input.Texcoord).x;
   
   float3 H         = normalize( E+L);
   float   NL       =   dot(N,L) ;
   float   NH       =   dot(N,H) ;
   float   EH       =   dot(E,H);
   float   NE       =   dot(N,E);
   
   float f0   =   pow((1-fn)/(1+fn),2);
   
   float	Fambient	=	f0+(1-f0)*pow(1-abs(NE),5);
   float   Fdiff   =   f0+(1-f0)*pow(1-NL,5);
   float   Fspec   =   f0+(1-f0)*pow(1-EH,5);
   
   float   diff   =   NL*saturate(1-Fdiff);//*pow(c,2.2);
   float   n      =   fn;
   float   spec   =   (0.0397436*n+0.0856832)*Fspec*pow(saturate(NH),n)/max(NL,NE);
    

   return float3(max(diff,0),max(spec,0),saturate(1-Fambient));
};


float2 GetOffset2(int   i,float2 inituv,float fNoise){
   
   float fsin,fcos;
   sincos((i*0.166666f+fNoise)*3.1415926f,fsin,fcos);
   float2x2 rot   =   float2x2(fcos,-fsin,fsin,fcos);
   return mul(inituv,rot)*(i+1);
};

PS_OUTPUT main( VS_OUTPUT Input ){

	float2 invShadowViewport	=	vRTSize.zw*0.5f;
	float2 invMrtViewport		=	vRTSize.xy;

   float2 halfPixel   =   0.5f*invShadowViewport;
   float2   uv=   Input.UV;//+halfPixel;
  // float2	offsetuv	=	uv;//+halfPixel;
   float2   xy=   UV_XY(uv);

   float4   rot   =  Tex2x2.Sample(SS_WrapPoint2,uv/invMrtViewport/4);
   float2 offsetDir	=	normalize(rot.yz*2-1)*(rot.x+1);
   //rot.y = rot.y*2-1;

	float4	vProjPos	=	float4(xy,0,1);
	vProjPos.z			=	MRTDepthTex.Sample(SS_WrapLine2,Input.UV).x;

	float4	vNormal		=	MRTNormalTex.Sample(SS_WrapLine2,Input.UV);//.xyz*2-1;
	float3 N	=	vNormal.xyz*2-1;

	float4	vWorldPos	=	mul(mViewProjectionInv,vProjPos);
	vWorldPos/=vWorldPos.w;

	float3	L	=	vCameraDir.xyz;//normalize(float3(-1,-1,-1));
	float3  E	=	normalize(vViewPos.xyz-	vWorldPos.xyz);


	float4	vShadowPos	=	mul(mShadowViewProj,vWorldPos);
	vShadowPos/=vShadowPos.w;
	float2 absXY	=	abs(vShadowPos.xy);
	if(absXY.x > 1.0f||absXY.y>1.0f||vShadowPos.z < 0.0f){
		discard;
	}
	float2  oldShaodwUV	=	XY_UV(vShadowPos.xy);
	float2	shadowUV	=	oldShaodwUV;//+halfPixel;
	float	oldZ		=	ShadowDepthTex.Sample(SS_WrapLine2,oldShaodwUV).x;

	float fRet   =   0;
	for(int i=0;i<SHADOW_SAMPLE_NUMBER;i++){
   

		
      //float2 off   =   offset[i].xy,float2(1,-1)*offset[i].yx,rot.x)*rot.y;
	  float2 rotoff = GetOffset2(i,float2(0,2),rot.y)*1.5;//*100;
      float2 tempuv   =   shadowUV+rotoff*invShadowViewport;
      float2 xyoff   =   UV_XY(tempuv);
      float    Oldshadowz   =  ShadowDepthTex.SampleLevel(SS_BorderLine2,tempuv,0).x+0.00001f;
      float4 tempshadow   =   mul(mShadowViewProjInv,float4(xyoff,Oldshadowz,1));
      tempshadow/=tempshadow.w;
      float3 tDir   =   normalize(tempshadow.xyz-vWorldPos.xyz);
      //float   fShadow      = ( oldZ.z > 0)&&(oldZ.z <(Oldshadowz+0.0001));
      fRet+=dot(tDir,L);
   }

	float3 fDot	=	PBRDF(N,-L,E,pow(abs(vNormal.w),2.2f)*127+1);
	

	PS_OUTPUT	Out;
	float shadowValue	=	(fRet/SHADOW_SAMPLE_NUMBER)*0.5+0.5;
	Out.Color						= float4(fDot.xy*shadowValue,fDot.z,0);//vShadowPos.z > 0 &&	vShadowPos.z < oldZ + 0.0001f;
	return	Out;
   
}