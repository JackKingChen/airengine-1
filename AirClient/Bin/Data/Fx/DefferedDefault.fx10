//基本延迟作色 材质效果

float4x4 WorldViewProjection : ViewProjection;
float4x4 World;

float4 fvEyePosition;

struct VS_INPUT 
{
   float4 Position : POSITION;
   float4 Normal   : NORMAL0;
   float2 Texcoord : TEXCOORD0;
   
};

struct	VS_INPUT_NOR{
	float4 Position : POSITION;
	float4 Normal   : NORMAL0;
	float2 Texcoord : TEXCOORD0;
	float3 Tan 			: TANGENT;
};

struct VS_OUTPUT 
{
   float4 Position : SV_POSITION;
   float2 Texcoord : TEXCOORD0;
   float4 Normal   : TEXCOORD1;
   float3 ViewDirection :   TEXCOORD2;
   float4 WorldNormal   : TEXCOORD3;
   float4	WorldPos			:	TEXCOORD4;
   
};


struct VS_OUTPUT_NOR
{
   float4 Position : SV_POSITION;
   float2 Texcoord : TEXCOORD0;
   float4 Normal   : TEXCOORD1;
   float4 WorldNormal   : TEXCOORD2;
   float4	WorldPos			:	TEXCOORD3;
   float4	WorldTan			:	TEXCOORD4;
   
};


VS_OUTPUT MainVS( VS_INPUT Input )
{
   VS_OUTPUT Output;

   Output.Position = mul( Input.Position,WorldViewProjection);
   Output.Normal   = mul( Input.Normal, WorldViewProjection);
   Output.WorldPos = Output.Position;
   Output.WorldNormal = mul(float4(Input.Normal.xyz,0),World);
   Output.Texcoord = Input.Texcoord;

   return( Output );
   
};
VS_OUTPUT_NOR MainVS_Nor( VS_INPUT_NOR Input )
{
   VS_OUTPUT_NOR Output;

   Output.Position = mul( Input.Position,WorldViewProjection);
   Output.Normal   = mul( Input.Normal, WorldViewProjection);
   Output.WorldPos = Output.Position;
   Output.WorldNormal = mul(float4(Input.Normal.xyz,0),World);
   Output.WorldTan		=	mul(float4(Input.Tan.xyz,0),World);
   Output.Texcoord = Input.Texcoord;

   return( Output );
   
};




float4 fvSpecular = float4( 1, 1, 1, 1.00 );
float4 fvDiffuse = float4( 0.89, 0.89, 0.89, 1.00 );

struct	PS_OUTPUT{
	float4	WorldPos:			SV_Target0;
	float4	WorldNormal:	SV_Target1;
	float4	Diffuse:			SV_Target2;
};

PS_OUTPUT MainPS( VS_OUTPUT Input ){

	PS_OUTPUT	Out;

	Out.WorldPos						=	float4(Input.WorldPos.z/Input.WorldPos.w,0,0,1);
  Out.WorldNormal         = float4(normalize( Input.WorldNormal.xyz )*0.5f+0.5f,fvSpecular.x);
  Out.Diffuse							=	fvDiffuse;
  return	Out;
   
}

Texture2D	DiffTex;
SamplerState diffState
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

PS_OUTPUT MainPS_Diff( VS_OUTPUT Input ){

	PS_OUTPUT	Out;
	
	float4	fvColor					=	DiffTex.Sample( diffState,Input.Texcoord);

	Out.WorldPos						=	float4(Input.WorldPos.z/Input.WorldPos.w,0,0,fvColor.w);
  Out.WorldNormal         = float4(normalize( Input.WorldNormal.xyz )*0.5f+0.5f,fvSpecular.x);
  Out.Diffuse							=	fvDiffuse*float4(fvColor.xyz,1);
  return	Out;
   
};


Texture2D	SpecTex;


PS_OUTPUT MainPS_DiffSpec( VS_OUTPUT Input ){

	PS_OUTPUT	Out;
	
	float4	fvColor					=	DiffTex.Sample( diffState,Input.Texcoord);
	float4	fvSpec					=	SpecTex.Sample( diffState,Input.Texcoord);

	Out.WorldPos						=	float4(Input.WorldPos.z/Input.WorldPos.w,0,0,fvColor.w);
  Out.WorldNormal         = float4(normalize( Input.WorldNormal.xyz )*0.5f+0.5f,fvSpec.x);
  Out.Diffuse							=	fvDiffuse*float4(fvColor.xyz,1);
  return	Out;
   
};

Texture2D	SelfTex;

PS_OUTPUT MainPS_DiffSpecSelf( VS_OUTPUT Input ){

	PS_OUTPUT	Out;
	
	float4	fvColor					=	DiffTex.Sample( diffState,Input.Texcoord);
	float4	fvSpec					=	SpecTex.Sample( diffState,Input.Texcoord);
	float4	fvSelf					=	SelfTex.Sample( diffState,Input.Texcoord);

	Out.WorldPos						=	float4(Input.WorldPos.z/Input.WorldPos.w,0,0,fvColor.w);
  Out.WorldNormal         = float4(normalize( Input.WorldNormal.xyz )*0.5f+0.5f,fvSpec.x);
  Out.Diffuse							=	fvDiffuse*float4(fvColor.xyz,fvSelf.x);
  return	Out;
   
};

Texture2D	NormTex;

PS_OUTPUT MainPS_DiffSpecNorm( VS_OUTPUT_NOR Input ){

	PS_OUTPUT	Out;
	
	float4	fvColor					=	DiffTex.Sample( diffState,Input.Texcoord);
	float4	fvSpec					=	SpecTex.Sample( diffState,Input.Texcoord);
	float4	fvNorm					=	NormTex.Sample( diffState,Input.Texcoord);
	
	float3	wNor						=	normalize(Input.WorldNormal.xyz);
	float3	wTan						=	normalize(Input.WorldTan.xyz);
	
	float3	normal					=	(2*fvNorm.xyz)-1;
	
	float3 	BiNorm 		= normalize( cross( wNor, wTan ) );
  float3x3 BTNMatrix = float3x3( BiNorm, wTan, wNor );
  float3	FinalNorm = normalize( mul( normal, BTNMatrix ) ); //world space bump

	Out.WorldPos						=	float4(Input.WorldPos.z/Input.WorldPos.w,0,0,fvColor.w);
  Out.WorldNormal         = float4(FinalNorm*0.5f+0.5f,fvSpec.x);
  Out.Diffuse							=	fvDiffuse*float4(fvColor.xyz,1);
  return	Out;
   
};

PS_OUTPUT MainPS_DiffSpecSelfNorm( VS_OUTPUT_NOR Input ){

	PS_OUTPUT	Out;
	
	float4	fvColor					=	DiffTex.Sample( diffState,Input.Texcoord);
	float4	fvSpec					=	SpecTex.Sample( diffState,Input.Texcoord);
	float4	fvNorm					=	NormTex.Sample( diffState,Input.Texcoord);
	float4	fvSelf					=	SelfTex.Sample( diffState,Input.Texcoord);

	
	float3	wNor						=	normalize(Input.WorldNormal.xyz);
	float3	wTan						=	normalize(Input.WorldTan.xyz);
	
	float3	normal					=	(2*fvNorm.xyz)-1;
	
	float3 	BiNorm 		= normalize( cross( wNor, wTan ) );
  float3x3 BTNMatrix = float3x3( BiNorm, wTan, wNor );
  float3	FinalNorm = normalize( mul( normal, BTNMatrix ) ); //world space bump

	Out.WorldPos						=	float4(Input.WorldPos.z/Input.WorldPos.w,0,0,fvColor.w);
  Out.WorldNormal         = float4(FinalNorm*0.5f+0.5f,fvSpec.x);
  Out.Diffuse							=	fvDiffuse*float4(fvColor.xyz,fvSelf.x);

  return	Out;
   
};

TextureCube	ReflTex;

PS_OUTPUT MainPS_DiffSpecSelfNormRefl( VS_OUTPUT_NOR Input ){

	PS_OUTPUT	Out;
	
	float4	fvColor					=	DiffTex.Sample( diffState,Input.Texcoord);
	float4	fvSpec					=	SpecTex.Sample( diffState,Input.Texcoord);
	float4	fvNorm					=	NormTex.Sample( diffState,Input.Texcoord);
	float4	fvSelf					=	SelfTex.Sample( diffState,Input.Texcoord);
	//float4	fvRefl					=	ReflTex.Sample(	diffState,Input.Texcoord);
	
	
	

	
	float3	wNor						=	normalize(Input.WorldNormal.xyz);
	float3	wTan						=	normalize(Input.WorldTan.xyz);
	
	float3	normal					=	(2*fvNorm.xyz)-1;
	
	float3 	BiNorm 		= normalize( cross( wNor, wTan ) );
  float3x3 BTNMatrix = float3x3( BiNorm, wTan, wNor );
  float3	FinalNorm = normalize( mul( normal, BTNMatrix ) ); //world space bump
  
  float3	EyeDir					=	normalize(fvEyePosition.xyz	-	Input.WorldPos.xyz);
  float3	ReflDir					=	2*FinalNorm	-	EyeDir;
  float4	fvRefl					=	ReflTex.Sample(	diffState,ReflDir);

	Out.WorldPos						=	float4(Input.WorldPos.z/Input.WorldPos.w,0,0,fvColor.w);
  Out.WorldNormal         = float4(FinalNorm*0.5f+0.5f,fvSpec.x);
  Out.Diffuse							=	fvDiffuse*float4(fvColor.xyz,fvSelf.x);
  return	Out;
   
};


RasterizerState CullNone
{
	CullMode = NONE;
	MultisampleEnable = TRUE;
};

BlendState NoneBlendState
{
    AlphaToCoverageEnable = FALSE;
};

DepthStencilState EableDepthWrite
{
    DepthEnable = TRUE;
    DepthWriteMask = ALL;
};


technique10 NoTexture
{
	pass p0
	{

        SetVertexShader( CompileShader( vs_4_0, MainVS() ) );
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_4_0, MainPS() ) );
        
        SetRasterizerState(CullNone);
        SetBlendState( NoneBlendState, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( EableDepthWrite, 0 );
	}
}

technique10 DiffTexture
{
	pass p0
	{

        SetVertexShader( CompileShader( vs_4_0, MainVS() ) );
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_4_0, MainPS_Diff() ) );

		
		    SetRasterizerState(CullNone);
        SetBlendState( NoneBlendState, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( EableDepthWrite, 0 );
	}
}

technique10 DiffSpecTexture
{
	pass p0
	{

        SetVertexShader( CompileShader( vs_4_0, MainVS() ) );
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_4_0, MainPS_DiffSpec() ) );

		
		    SetRasterizerState(CullNone);
        SetBlendState( NoneBlendState, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( EableDepthWrite, 0 );
	}
}

technique10 DiffSpecSelfTexture
{
	pass p0
	{
        SetVertexShader( CompileShader( vs_4_0, MainVS() ) );
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_4_0, MainPS_DiffSpecSelf() ) );

		
		    SetRasterizerState(CullNone);
        SetBlendState( NoneBlendState, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( EableDepthWrite, 0 );
	}
}

technique10	DiffSpecNorm
{
	pass Pass0
	{
        SetVertexShader( CompileShader( vs_4_0, MainVS_Nor() ) );
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_4_0, MainPS_DiffSpecNorm() ) );

		
		    SetRasterizerState(CullNone);
        SetBlendState( NoneBlendState, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( EableDepthWrite, 0 );
	}
}

technique10 DSSN
{
	pass p0
	{

        SetVertexShader( CompileShader( vs_4_0, MainVS_Nor() ) );
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_4_0, MainPS_DiffSpecSelfNorm() ) );

		
		    SetRasterizerState(CullNone);
        SetBlendState( NoneBlendState, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( EableDepthWrite, 0 );
	}
}

technique10 DSSNR
{
	pass p0
	{

        SetVertexShader( CompileShader( vs_4_0, MainVS_Nor() ) );
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_4_0, MainPS_DiffSpecSelfNormRefl() ) );

		
		    SetRasterizerState(CullNone);
        SetBlendState( NoneBlendState, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( EableDepthWrite, 0 );
	}
}

